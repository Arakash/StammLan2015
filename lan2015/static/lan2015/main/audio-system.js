// Generated by CoffeeScript 1.8.0
(function() {
  var AudioSystem, FFT_SIZE, VIS_BARS, VIS_DELAY, VIS_FALLOFF, VIS_FPS;

  if (window.stammlan == null) {
    window.stammlan = {};
  }

  FFT_SIZE = 1024;

  VIS_FPS = 30;

  VIS_BARS = 30;

  VIS_DELAY = 2;

  VIS_FALLOFF = 2;

  window.stammlan.AudioSystem = AudioSystem = (function() {
    AudioSystem.prototype.context = null;

    AudioSystem.prototype.sourceNode = null;

    AudioSystem.prototype.analyzerNode = null;

    AudioSystem.prototype.scale = null;

    AudioSystem.prototype.visLeftChannel = void 0;

    AudioSystem.prototype.visRightChannel = void 0;

    AudioSystem.prototype.connected = false;

    AudioSystem.prototype.visTimer = null;

    AudioSystem.prototype.bars = [];

    AudioSystem.prototype.delay = [];

    AudioSystem.prototype.fft = null;

    AudioSystem.prototype.listeners = [];

    function AudioSystem() {
      var i, _i;
      this.context = new AudioContext();
      this.fft = new stammlan.FFT();
      for (i = _i = 0; 0 <= VIS_BARS ? _i < VIS_BARS : _i > VIS_BARS; i = 0 <= VIS_BARS ? ++_i : --_i) {
        this.bars.push(0);
        this.delay.push(0);
      }
      this.calculateScale();
    }

    AudioSystem.prototype.setup = function(element, context, source) {
      if (context) {
        this.context = context;
      }
      if (source) {
        this.sourceNode = source;
      } else {
        this.sourceNode = this.context.createMediaElementSource(element);
        this.sourceNode.connect(this.context.destination);
      }
      this.analyzerNode = this.context.createScriptProcessor(FFT_SIZE);
      this.sourceNode.connect(this.analyzerNode);
      this.analyzerNode.connect(this.context.destination);
      this.analyzerNode.onaudioprocess = (function(_this) {
        return function(event) {
          _this.visLeftChannel = event.inputBuffer.getChannelData(0);
          return _this.visRightChannel = event.inputBuffer.getChannelData(1);
        };
      })(this);
      return this.connected = true;
    };

    AudioSystem.prototype.disconnect = function() {
      if (this.connected) {
        this.sourceNode.disconnect();
        this.analyzerNode.disconnect();
        this.analyzerNode.onaudioprocess = void 0;
        this.visLeftChannel = void 0;
        this.visRightChannel = void 0;
        return this.connected = false;
      }
    };

    AudioSystem.prototype.startVis = function() {
      return this.visTimer = setInterval(((function(_this) {
        return function() {
          return _this.updateVis();
        };
      })(this)), 1000 / VIS_FPS);
    };

    AudioSystem.prototype.stopVis = function() {
      if (this.visTimer) {
        return clearInterval(this.visTimer);
      }
    };

    AudioSystem.prototype.updateVis = function() {
      var fftData, i, listener, visData, _i, _j, _len, _ref, _results;
      visData = new Array(FFT_SIZE);
      for (i = _i = 0; 0 <= FFT_SIZE ? _i < FFT_SIZE : _i > FFT_SIZE; i = 0 <= FFT_SIZE ? ++_i : --_i) {
        if (this.visLeftChannel && this.visRightChannel) {
          visData[i] = (this.visLeftChannel[i] + this.visRightChannel[i]) / 2.0;
        }
      }
      fftData = this.fft.calcFreq(visData);
      this.formatVis(fftData);
      _ref = this.listeners;
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        listener = _ref[_j];
        _results.push(listener(this.bars));
      }
      return _results;
    };

    AudioSystem.prototype.formatVis = function(fftData) {
      var a, b, i, n, x, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= VIS_BARS ? _i < VIS_BARS : _i > VIS_BARS; i = 0 <= VIS_BARS ? ++_i : --_i) {
        a = Math.ceil(this.scale[i]);
        b = Math.floor(this.scale[i + 1]);
        n = 0;
        if (b < a) {
          n += fftData[b] * (this.scale[i + 1] - this.scale[i]);
        } else {
          if (a > 0) {
            n += fftData[a - 1] * (a - this.scale[i]);
          }
          while (a < b) {
            n += fftData[a];
            a++;
          }
          if (b < (FFT_SIZE / 2)) {
            n += fftData[b] * (this.scale[i + 1] - b);
          }
        }
        if (n === 0) {
          x = 0;
        } else {
          x = 40 + 20 * Math.log10(n);
        }
        x = Math.max(0, Math.min(x, 40));
        this.bars[i] -= Math.max(0, VIS_FALLOFF - this.delay[i]);
        if (this.bars[i] < 0) {
          this.bars[i] = 0;
        }
        if (this.delay[i] > 0) {
          this.delay[i] -= 1;
        }
        if (x > this.bars[i]) {
          this.bars[i] = x;
          _results.push(this.delay[i] = VIS_DELAY);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    AudioSystem.prototype.calculateScale = function() {
      var i, _i, _results;
      this.scale = [];
      _results = [];
      for (i = _i = 0; 0 <= VIS_BARS ? _i <= VIS_BARS : _i >= VIS_BARS; i = 0 <= VIS_BARS ? ++_i : --_i) {
        _results.push(this.scale.push(Math.pow(FFT_SIZE / 2, i / VIS_BARS) - 0.5));
      }
      return _results;
    };

    AudioSystem.prototype.addListener = function(listener) {
      return this.listeners.push(listener);
    };

    return AudioSystem;

  })();

}).call(this);

//# sourceMappingURL=audio-system.js.map
